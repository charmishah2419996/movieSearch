{"version":3,"sources":["features/modalBox/actions.js","features/modalBox/ModalInfo.js","Helpers/API.js","features/searchMovie/actions.js","features/searchMovie/Search.js","App.js","features/searchMovie/reducers.js","app/store.js","serviceWorker.js","index.js"],"names":["REMOVE_SELECTED_MOVIE","ModalInfo","props","handleClose","removeSelectedMovie","state","show","movie","this","className","Modal","undefined","Title","onHide","scrollable","Header","closeButton","Body","Released","Actors","imdbRating","Component","connect","movieData","txt","dispatch","type","value","API","link","fetch","then","response","json","SELECTED_MOVIE_SUCCESS","MovieSearch","handleChange","debounce","bind","handleClick","searchValue","selectedUrl","searchResult","counter","event","movieName","target","setState","apiCall","m","fetchSelectedMovie","newcounter","res","Search","name","onChange","placeholder","map","onClick","Poster","src","width","height","imdbID","Button","variant","handleClickPrevious","handleClickNext","id","data","catch","err","App","url","action","store","configureStore","reducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ade3dfdf.chunk.js","sourcesContent":["\nexport const REMOVE_SELECTED_MOVIE = 'REMOVE_SELECTED_MOVIE'\n\n\n\nexport const removeSelectedMovie = (txt) => dispatch => {\n    dispatch({ type: REMOVE_SELECTED_MOVIE,value:txt });\n}","import  { Component  } from 'react';\nimport '../../App.css';\nimport { connect } from 'react-redux';\nimport { removeSelectedMovie} from \"./actions\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {Modal} from 'react-bootstrap'\nclass ModalInfo extends Component {\n     constructor(props) {\n        super(props);\n       \n        this.state = {\n            show:false\n           \n        };\n    \n    }\n \n    handleClose = () =>{\n        this.props.removeSelectedMovie();\n        \n    }\n   \n    render() {\n        let { movie } = this.props;\n        return (\n            <div className=\"\">    \n                <Modal show={movie != null && movie.Title != undefined} onHide={this.handleClose} scrollable>\n                        <Modal.Header closeButton>\n                            <Modal.Title> Selected Movie </Modal.Title>\n                        </Modal.Header>\n                        <Modal.Body>\n                            <label>Movie Name:</label>\n                            <h6> {movie.Title}</h6>\n\n                            <label>Movie Released Date:</label>\n                            <h6> {movie.Released}</h6>\n\n                            <label>Actors</label>\n                            <h6>{movie.Actors}</h6>\n\n                            <label>imdbRating</label>\n                            <h6>{movie.imdbRating}</h6>\n                         </Modal.Body>\n                    \n                    </Modal>\n            </div>\n        );\n    }\n}\nconst mapStateToProps = state => {\n    return { movie:state.movieData.movie};\n}\nexport default connect(mapStateToProps, { removeSelectedMovie})(ModalInfo);\n\n","const API = (link)=>{\n    return fetch(link)\n        .then(response => response.json())\n}\nexport default API","import API from \"../../Helpers/API\"\nexport const SELECTED_MOVIE_SUCCESS = 'SELECTED_MOVIE_SUCCESS'\nexport const SELECTED_MOVIE_FAILURE = 'SELECTED_MOVIE_FAILURE'\nexport const SELECTED_MOVIE = 'SELECTED_MOVIE'\n\nexport const fetchSelectedMovie = (id) => dispatch => {\n    dispatch({ type: SELECTED_MOVIE })\n    return API(`https://www.omdbapi.com/?t=${id}&apikey=4e1cdf4`)\n        .then(json => dispatch({ type: SELECTED_MOVIE_SUCCESS, data: json }))\n        .catch(err => dispatch({ type: SELECTED_MOVIE_FAILURE }))\n}\n\n\n\n\n\n","import  { Component } from 'react';\nimport { connect } from 'react-redux';\nimport '../../App.css';\nimport debounce from 'lodash.debounce';\nimport { fetchSelectedMovie } from './actions';\nimport ModalInfo from '../modalBox/ModalInfo';\n\nimport API from '../../Helpers/API';\nimport Button from 'react-bootstrap/Button'\n\nclass MovieSearch extends Component {\n    \n    constructor(props) {\n        super(props);\n       \n           \n        this.handleChange = debounce(this.handleChange.bind(this), 1000);\n        this.handleClick = this.handleClick.bind(this);\n           \n        this.state = {\n            searchValue: '',\n            selectedUrl:'',\n            searchResult:[],\n            counter:1\n        };\n    \n    }\n    handleChange(event){\n      \n        var movieName =event.target.value;\n        this.setState({searchValue:movieName});\n       this.apiCall();\n\n    }\n    handleClick(m){\n        this.props.fetchSelectedMovie(m);  \n\n    }\n    handleClickNext(){\n        var newcounter;\n        if(this.state.counter == 100){\n             newcounter = 1;\n        }else{\n            newcounter = this.state.counter + 1;\n        }\n        this.state.counter =newcounter;\n        this.apiCall();\n    }\n    apiCall(){\n        var res= API(`https://www.omdbapi.com/?s=${this.state.searchValue}&apikey=4e1cdf4&page=${this.state.counter}`);\n        res.then(res=>{\n            this.setState({searchResult:res.Search});\n            \n        })\n    }\n    handleClickPrevious(){\n        var newcounter;\n        if(this.state.counter == 1){\n             newcounter = 1;\n        }else{\n             newcounter = this.state.counter - 1;\n        }\n        this.state.counter =newcounter;\n        this.apiCall();\n       \n    }\n\n    \n    render() {\n         let {movie} = this.props; \n        return (\n            <div>\n                <div className=\"\">\n                    <div className=\"alignTitle\">\n                        <input type=\"text\" name=\"name\" className=\"alignTitleip\" onChange={this.handleChange} placeholder=\"Search movie by title\"/>\n                    </div>\n                    {this.state.searchResult  == null || this.state.searchResult[0] == null ? <div /> : <div className=\"\">\n                        <div className=\"grid\">\n                            {this.state.searchResult.map(m =>\n                                <div key={m.imdbID} className=\"grid_item_inside\" onClick={() => this.handleClick(m.Title)}>\n                                    \n                               {m.Poster == 'N/A' ?<div className=\"nonImg\" />: <img src={m.Poster} width=\"200px\" height=\"200px\"></img>}\n                                <div>\n                                   <h5> {m.Title}</h5>\n                                </div>\n                            </div>)}\n                        </div>\n                    </div>}\n                </div>\n                <div>             \n                    {movie == null || movie.Title == ''? <div />:<div><ModalInfo></ModalInfo></div>}\n                </div>\n                <div className=\"pagination\">\n                    {this.state.searchResult == null  || this.state.counter == 1? <div />:<div> <Button variant=\"primary\" className=\"btn\" onClick={() => this.handleClickPrevious()}>Previous</Button></div>}                    \n                    {this.state.searchResult == null || this.state.searchResult[0] == null? <div />:<div> <Button variant=\"primary\" className=\"btn\" onClick={() => this.handleClickNext()}>Next</Button></div>}\n                </div>\n\n\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {  movie: state.movieData.movie};\n}\n\nexport default connect(mapStateToProps, { fetchSelectedMovie})(MovieSearch);\n\n\n","import React from 'react';\nimport ModalInfo from './features/modalBox/ModalInfo';\nimport Search from './features/searchMovie/Search';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div>\n      <Search />\n     <ModalInfo/>\n    </div>\n  );\n}\n\nexport default App;\n","import { REMOVE_SELECTED_MOVIE } from '../modalBox/actions'\nimport {SELECTED_MOVIE_SUCCESS } from './actions'\n\nconst movieData = (state = { movie: {}, url: \"\" }, action) => {\n\n    switch (action.type) {\n        case SELECTED_MOVIE_SUCCESS:\n          return { ...state, movie: action.data }; \n        case REMOVE_SELECTED_MOVIE:\n          return { ...state, movie: \"\" }; \n                \n        default:\n          return state\n    }\n}\n\nexport default movieData\n\n\n","import { configureStore } from '@reduxjs/toolkit';\nimport  movieData from \"../features/searchMovie/reducers\";\n\nexport const store = configureStore({\n  reducer: { \n    movieData:movieData\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}